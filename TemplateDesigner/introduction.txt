How to render an article within a template
-------------------------------------------

During the development of this code I started down a path where I wrote a componentType, componentTypeLibrary, and renderer. This worked until I started to implement hierarchical components, and then it became too complicated. On further reflection I started to feel that jsRender could do hierarchical rendering for me quite easily, so I took that path instead. It worked out well.

Here's an article object ..

    var simplifiedArticle = {
      "id":"001",
      "children":[
        { "id":"001.1", "headline":"h1", "standFirst":"sf1", "body":"b1", "image":"img1.jpg" },
      ]
    };

Here's article template which contains a flow and two children ..

    var template = {
      "name":"Flow",
      "root":{
        componentType:"flow",
        children: [
          {
            componentType:"headline",
            dataPath:"children",
            dataIndex:0
            realData: // has to be linked at render time.
          },
          {
            componentType:"body",
            dataPath:"children",
            dataIndex:0
            realData: // has to be linked at render time.
          }
        ]
      }
    };

We can define a set of jsRender templates for each component and the flow ..

    jsviews.templates({
      headline: "<h1>{{:realData.headline}}</h1>",
      body: "{{:realData.body}}",
      flow: "
        <div>
          {{for children tmpl="component"}}
        </div>
      ",
    });

If we combine the article template and article object together, we can render the combination using jsRender ..

    var html = jsviews.render.flow(theTemplateAndArticleData);

Here's a grid template. The grid has a number of children which are layed out on, you guessed it, a grid.

    var template = {
      "root":{
        componentType:"grid",
        rows:3,
        columns:4,
        children: [
          {
            left:0,
            top:0,
            width:2,
            height:1,
            component:{
              componentType:"headline",
              dataPath:"children",
              dataIndex:0,
              realData: // has to be linked at render time.
            }
          },
          {
            left:0,
            top:1,
            width:2,
            height:2
            component:{
              componentType:"body",
              dataPath:"children",
              dataIndex:0,
              realData: // has to be linked at render time.
            }
          }
        ]
      }
    };

The grid will be rendered as a series of divs which are positioned absolutely.  We can specify the left, right, top and bottom to a px value or a % value.  The grid HTML would look like this.

    <div>
      {{for children}}
        <div left={{:left * ~root.columnWidth}} top={{:top * ~root.rowWidth}} etc>
          {{if component tmpl="component"/}}
        </div>
      {{/for}}
    </div>

This leads to the following set of templates ..

    $.templates({
      headline: "<h1>{{:realData.headline}}</h1>",
      body: "{{:realData.body}}",
      flow: "
        <div>
          {{for children tmpl="component"}}
        </div>
      ",
      grid: "
        <div>
          {{for children}}
            <div left={{:left * ~root.columnWidth}} top={{:top * ~root.rowWidth}} etc>
              {{for component tmpl="component"/}}
            </div>
          {{/for}}
        </div>
      ",
      component: "
        {{if componentType==="headline" tmpl="headline"/}}
        {{if componentType==="body" tmpl="body"/}}
        {{if componentType==="flow" tmpl="flow"/}}
        {{if componentType==="grid" tmpl="grid"/}}
      "
    });

A class diagram for the Article model and the Template models can be found in the Models folder







